name: Build & Test Fedora

on: push

## Build ##

jobs:
  linux-fedora:
    name: Build on Fedora Linux
    runs-on: ubuntu-latest
    container: sogno/dpsim:dev
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Environment
      run: mkdir build

    - name: Configure CMake
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake -DCIM_VERSION=CGMES_2.4.15_16FEB2016 $GITHUB_WORKSPACE

    - name: Build every target
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake --build .
      env:
        MAKEFLAGS: "-j2"

    - name: Cache build directory
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/build
        key: build-cache-fedora-${{ github.sha }}

## Tests ##
  test-jupyter-notebooks:
    name: Run pytest over all notebooks
    runs-on: ubuntu-latest
    needs: [linux-fedora]
    container: sogno/dpsim:dev
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Restore Cache
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/build
        key: build-cache-fedora-${{ github.sha }}
    
    - name: Run pytest
      shell: bash
      working-directory: ${{ github.workspace }}
      env:
        PYTHONPATH: "${{ github.workspace }}/build"
      run: pytest -v Examples/Notebooks
    
    - name: Archive notebook outputs
      uses: actions/upload-artifact@v2
      with:
        name: pytest-output
        path: outputs/Examples/Notebooks/

  test-binaries:
    name: Execute Example
    runs-on: ubuntu-latest
    container: sogno/dpsim:dev
    needs: [linux-fedora]
    steps:
    - name: Restore Cache
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/build
        key: build-cache-fedora-${{ github.sha }}

    - name: Run Binaries 1/2
      run: ./build/Examples/Cxx/WSCC_9bus_mult_coupled

    - name: Run Binaries 2/2
      run: ./build/Examples/Cxx/WSCC_9bus_mult_decoupled

  cpp-check:
    name: Scan Sourcecode with Cppcheck
    runs-on: ubuntu-latest
    container: sogno/dpsim:dev
    #needs: [linux-fedora]
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Run cppcheck
      working-directory: ${{ github.workspace }}
      shell: bash
      id: cppcheck
      run: |
        set -o pipefail
        cppcheck --max-configs=32 -j 32 --inline-suppr --error-exitcode=1 -q --enable=warning,performance,portability,information,missingInclude --std=c++11 -I Include/ -I models/Include/ Source/ models/Source/ 2>&1 | tee cppcheck-output.log
      continue-on-error: true

    - name: Print cppcheck errors
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: (! cat cppcheck-output.log | grep -A 2 "error:")

    - name: Print cppcheck warnings
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: (! cat cppcheck-output.log | grep -A 2 "warning:")
      continue-on-error: true

    - name: Print cppcheck performance
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: (! cat cppcheck-output.log | grep -A 2 "performance:")
      continue-on-error: true

    - name: Print cppcheck portability
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: (! cat cppcheck-output.log | grep -A 2 "portability:")
      continue-on-error: true

    - name: Print cppcheck missingInclude
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: (! cat cppcheck-output.log | grep -A 2 "missingInclude:")
      continue-on-error: true

    - name: Print cppcheck information
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: (! cat cppcheck-output.log | grep -A 2 "information:")
      continue-on-error: true

    - name: Print cppcheck notes
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: (! cat cppcheck-output.log | grep -A 2 "note:")
      continue-on-error: true

    - name: Archive cppcheck output
      uses: actions/upload-artifact@v2
      if: ${{ always() && steps.cppcheck.outcome == 'failure' }}
      with:
        name: cppcheck-output
        path: cppcheck-output.log