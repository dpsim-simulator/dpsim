variables:
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive

  DOCKER_IMAGE: sogno/dpsim
  DOCKER_IMAGE_DEV: sogno/dpsim-dev-rocky

  MAKE_OPTS: -j16 # for HYPER buildbots

stages:
  - prepare
  - build
  - test
  - generate

docker:rocky:
  stage: prepare
  needs: []
  script:
    - docker build .
        --build-arg MAKE_OPTS=${MAKE_OPTS}
        --file packaging/Docker/Dockerfile.dev-rocky
        --tag ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
  tags:
    - docker

build:linux-cuda:
  stage: build
  needs: ["docker:rocky"]
  image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
  artifacts:
    paths:
      - build
  tags:
    - docker
  script:
    - mkdir -p build
    - cd build
    - cmake -DWITH_CUDA=ON -DWITH_SPARSE=ON -DFETCH_SPDLOG=ON -DWITH_MAGMA=ON ..
    - make ${MAKE_OPTS}
  cache:

.benchmark-script: &benchmark-script |
    for ((copies=0;copies<=$TEST_NUM_COPIES;copies++))
    do
      echo "Running with $copies copies"
      $TEST_BINARY_PATH/$TEST_BINARY $TEST_PARAM -o copies=$copies 2>&1 | tee output.log
      cat output.log |
      sed -n -E -e 's/^.*Average step time. ([0-9]+\.[0-9]+)$/\1/p' |
      tee -a ${METRICS_ID}-metrics.txt
    done

.benchmark-step-times:
  stage: test
  script:
    - *benchmark-script
  image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
  tags:
    - docker

test:solver-benchmark 1/2:
    extends: .benchmark-step-times
    needs: ["build:linux-cuda"]
    dependencies:
      - build:linux-cuda
    variables:
# Metrics-filename
      METRICS_ID: 'cpu-dense'
# Name of the test binary
      TEST_BINARY: 'WSCC_9bus_mult_coupled'
# Path where the test binary is located
      TEST_BINARY_PATH: 'build/dpsim/examples/cxx'
# Up to how many copies should be benchmarked (WSCC_9bus - Example)
      TEST_NUM_COPIES: 6
      TEST_PARAM: "-U EigenDense"
    artifacts:
      reports:
          metrics: cpu-dense-metrics.txt
      paths:
        - cpu-dense-metrics.txt
      expose_as: 'step-times-benchmark'

test:solver-benchmark 2/2:
    extends: .benchmark-step-times
    needs: ["build:linux-cuda"]
    dependencies:
      - build:linux-cuda
    variables:
# Metrics-filename
      METRICS_ID: 'cpu-sparse'
# Name of the test binary
      TEST_BINARY: 'WSCC_9bus_mult_coupled'
# Path where the test binary is located
      TEST_BINARY_PATH: 'build/dpsim/examples/cxx'
# Up to how many copies should be benchmarked (WSCC_9bus - Example)
      TEST_NUM_COPIES: 6
      TEST_PARAM: "-U EigenSparse"
    artifacts:
      reports:
          metrics: cpu-sparse-metrics.txt
      paths:
        - cpu-sparse-metrics.txt
      expose_as: 'step-times-benchmark'


.gpu-init-script: &gpu-init-script |
    mkdir ~/.ssh &&
      echo "-----BEGIN OPENSSH PRIVATE KEY-----" > ~/.ssh/id_rsa &&
      echo $SSH_PRIVATE | sed "s/\S\{64\}/&\n/g" >> ~/.ssh/id_rsa &&
      echo "-----END OPENSSH PRIVATE KEY-----" >> ~/.ssh/id_rsa &&
      echo $SSH_PUBLIC > ~/.ssh/id_rsa.pub &&
      echo $KNOWN_HOSTS > ~/.ssh/known_hosts && chmod 600 ~/.ssh/id_rsa
    echo "$TEST_BINARY_PATH/$TEST_BINARY $TEST_FILES" | tr -d '\n' | xargs -r -d " " -I % cp % $LDIR
    ldd $LDIR/$TEST_BINARY |
      sed -n -E -e 's/^\s+\S+ => (\S+) \S+$/\1/p' |
      grep -Ev "$(echo $REMOTE_LIBS | tr ' ' '|')|not" |
      xargs -I % cp % $LDIR/
    ssh $GPU_TARGET mkdir -p $RDIR
    scp -r $LDIR/* $GPU_TARGET:$RDIR/

.gpu-run-script: &gpu-run-script |
  ssh $GPU_TARGET "LD_LIBRARY_PATH=$RDIR:${LD_LIBRARY_PATH} LD_PRELOAD=$RDIR/cricket-server.so $RDIR/$TEST_BINARY" &
  sleep 2
  PATH=$LDIR:${PATH} REMOTE_GPU_ADDRESS=ghost.acs-lab.eonerc.rwth-aachen.de LD_PRELOAD=$LDIR/cricket-client.so $TEST_BINARY_PATH/$TEST_BINARY $TEST_PARAM 2>&1 | tee output.log
  cat output.log |
  sed -n -E -e 's/^.*Average step time. ([0-9]+\.[0-9]+)$/\1/p' |
  tee -a ${METRICS_ID}-metrics.txt

.remote-gpu:
  stage: test
  variables:
    GPU_TARGET: 'gitlab-runner@ghost'
    RDIR: '/tmp/gitlab-jobs/$CI_PROJECT_NAME/$CI_JOB_ID'
    CI_DIR: '$CI_BUILDS_DIR/$CI_PROJECT_PATH'
    LDIR: '/cricket/bin'
    TEST_FILES: ''
    TEST_PARAM: ''
    REMOTE_LIBS: 'linux-vdso.so.1
                  librt.so.1
                  libdl.so.2
                  libcudart.so.10.2
                  libcusolver.so.10
                  libstdc\+\+.so.6
                  libm.so.6
                  libgcc_s.so.1
                  libc.so.6
                  /lib64/ld-linux-x86-64.so.2
                  libutil.so.1
                  libpthread.so.0'
  script:
    - *gpu-init-script
    - *gpu-run-script
  after_script:
    - ssh $GPU_TARGET rm -rf $RDIR
    - ssh $GPU_TARGET pkill -fe -2 $RDIR/$TEST_BINARY
  image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
  tags:
    - docker

test:cuda 1/3:
    extends: .remote-gpu
    needs: ["build:linux-cuda"]
    dependencies:
    - build:linux-cuda
    variables:
# Metrics-filename
      METRICS_ID: 'cuda'
# Name of the test binary
      TEST_BINARY: 'WSCC_9bus_mult_coupled'
# Path where the test binary is located
      TEST_BINARY_PATH: 'build/dpsim/examples/cxx'
# Additional files that are necessary to run the application on the GPU node
      TEST_FILE: ''
# Command line parameters for the test binary
      TEST_PARAM: "-U CUDADense"
    artifacts:
      reports:
          metrics: cuda-metrics.txt
      paths:
        - cuda-metrics.txt
      expose_as: 'step-times-benchmark'

test:cuda 2/3:
    extends: .remote-gpu
    needs: ["build:linux-cuda"]
    dependencies:
    - build:linux-cuda
    allow_failure: true
    variables:
# Metrics-filename
      METRICS_ID: 'cuda'
# Name of the test binary
      TEST_BINARY: 'WSCC_9bus_mult_coupled'
# Path where the test binary is located
      TEST_BINARY_PATH: 'build/dpsim/examples/cxx'
# Additional files that are necessary to run the application on the GPU node
      TEST_FILE: ''
# Command line parameters for the test binary
      TEST_PARAM: '-U CUDASparse'
    artifacts:
      reports:
          metrics: cuda-metrics.txt
      paths:
        - cuda-metrics.txt
      expose_as: 'step-times-benchmark'

test:cuda 3/3:
    extends: .remote-gpu
    needs: ["build:linux-cuda"]
    allow_failure: true
    dependencies:
    - build:linux-cuda
    variables:
# Metrics-filename
      METRICS_ID: 'cuda'
# Name of the test binary
      TEST_BINARY: 'WSCC_9bus_mult_coupled'
# Path where the test binary is located
      TEST_BINARY_PATH: 'build/dpsim/examples/cxx'
# Additional files that are necessary to run the application on the GPU node
      TEST_FILE: ''
# Command line parameters for the test binary
      TEST_PARAM: '-U CUDAMagma'
    artifacts:
      reports:
          metrics: cuda-metrics.txt
      paths:
        - cuda-metrics.txt
      expose_as: 'step-times-benchmark'

generate:metrics:
  stage: generate
  needs: ["test:solver-benchmark 1/2", "test:solver-benchmark 2/2"]
  script:
    - echo "set terminal svg size 800, 500; set output 'metrics.svg'; set title 'Speed of different Solver-Configurations'; set style data lines; set key outside; set xlabel \"Copies (WSCC-9bus Example)\"; set ylabel \"Average steptime (Âµs)\"; set xtics 1; set xtics nomirror; set ytics nomirror; set grid; plot \"cpu-dense-metrics.txt\" using (\$1 * 1000000) title \"Solving with CPU and dense matrices\", \"gpu-dense-metrics.txt\" using (\$1 * 1000000) title \"Solving with GPU and dense matrices\", \"cpu-sparse-metrics.txt\" using (\$1 * 1000000) title \"Solving with CPU and sparse matrices\"" > script.p
    - gnuplot script.p
  image: ${DOCKER_IMAGE_DEV}:${CI_COMMIT_REF_NAME}
  artifacts:
    reports:
      metrics: metrics.svg
    paths:
      - metrics.svg
    expose_as: 'WSCC-9bus-benchmark'
  tags:
    - docker
